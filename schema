CREATE TABLE IF NOT EXISTS Users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fname VARCHAR(255) UNIQUE NOT NULL,
    lname VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(20)NOT NULL
);

CREATE TABLE IF NOT EXISTS Courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(150) NOT NULL,
    thumbnailUrl VARCHAR (255) NOT NULL,
    public_id VARCHAR (255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    instructor_id INT NOT NULL,
    course_type VARCHAR(100),
    enrollment_fee DECIMAL(10, 2) NOT NULL,
    course_status TINYINT(1) NOT NULL,
    FOREIGN KEY (instructor_id) REFERENCES Users(user_id)
);
CREATE TABLE IF NOT EXISTS CourseContent (
    content_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    title VARCHAR(255),
    description TEXT,
    content_url VARCHAR(255),
    public_id VARCHAR (255) NOT NULL,
    content_category VARCHAR (255) NOT NULL,
    content_status TINYINT(1) NOT NULL,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
CREATE TABLE IF NOT EXISTS Enrollments (
    enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    course_id INT  NOT NULL,
    enrollment_date DATETIME  NOT NULL,
    completion_status TINYINT(1)  NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
CREATE TABLE IF NOT EXISTS CourseProgress (
    progress_id INT AUTO_INCREMENT PRIMARY KEY,
    enrollment_id INT  NOT NULL,
    content_id INT NOT NULL,
    completion_status TINYINT(1)  NOT NULL,
    last_accessed_date DATETIME  NOT NULL,
    FOREIGN KEY (enrollment_id) REFERENCES Enrollments(enrollment_id),
    FOREIGN KEY (content_id) REFERENCES CourseContent(content_id)
);
CREATE TABLE IF NOT EXISTS Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT  NOT NULL,
    course_id INT NOT NULL,
    amount_paid INT NOT NULL,
    payment_date DATETIME  NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
